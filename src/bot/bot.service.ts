// src/bot/bot.service.ts
import { Injectable, OnModuleInit } from '@nestjs/common';
import { PrismaService } from 'nestjs-prisma';
import { InjectBot } from 'nestjs-telegraf';
import { Telegraf, Context as TelegrafContext } from 'telegraf';
import { Product } from '@prisma/client';

@Injectable()
export class BotService implements OnModuleInit {
  constructor(
    @InjectBot() private readonly bot: Telegraf<TelegrafContext>,
    private readonly prisma: PrismaService,
  ) {}

  async onModuleInit() {
    // —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
    await this.bot.telegram.setMyCommands([
      { command: 'menu', description: '–û—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' },
      { command: 'add', description: '–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä' },
      { command: 'inventory', description: '–ü–æ–∫–∞–∑–∞—Ç—å –æ—Å—Ç–∞—Ç–∫–∏' },
    ]);

    // –ø–æ–¥–∫–ª—é—á–∞–µ–º middleware
    this.bot.use(async (ctx, next) => {
      // –ø–∞—Ç—á–∏–º reply —á–µ—Ä–µ–∑ any, —á—Ç–æ–±—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É —Ç–∏–ø—É
      const originalReply = (ctx as any).reply.bind(ctx);
      (ctx as any).reply = async (text: string, extra?: any) => {
        console.log('üì§ reply ‚Üí', text, extra);
        return originalReply(text, extra);
      };

      // user upsert
      if (ctx.from?.id) {
        const tgId = String(ctx.from.id);
        const user = await this.prisma.user.upsert({
          where: { telegramId: tgId },
          update: {},
          create: { telegramId: tgId },
        });
        ctx.state.user = user;
      }

      return next();
    });
  }

  async notifyLowStock(products: Product[]) {
    if (!products.length) return;
    const message =
      '‚ö†Ô∏è –ù–∏–∑–∫–∏–π –æ—Å—Ç–∞—Ç–æ–∫ –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º:\n' +
      products.map((p) => `‚Ä¢ ${p.name}: ${p.quantity} (–º–∏–Ω–∏–º—É–º: ${p.minThreshold})`).join('\n');
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å —Ä–æ–ª—å—é admin, –ª–∏–±–æ –≤—Å–µ—Ö)
    const users = await this.prisma.user.findMany();
    for (const user of users) {
      if (user.telegramId) {
        try {
          await this.bot.telegram.sendMessage(user.telegramId, message);
        } catch (e) {
          console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', e);
        }
      }
    }
  }
}
