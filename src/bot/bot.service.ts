// src/bot/bot.service.ts
import { Injectable, OnModuleInit } from '@nestjs/common';
import { PrismaService } from 'nestjs-prisma';
import { InjectBot } from 'nestjs-telegraf';
import { Telegraf, Context as TelegrafContext } from 'telegraf';
import { Product } from '@prisma/client';

@Injectable()
export class BotService implements OnModuleInit {
  constructor() {}

  async onModuleInit() {}
  // —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
  // await this.bot.telegram.setMyCommands([
  //   { command: 'menu', description: '–û—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' },
  //   { command: 'add', description: '–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä' },
  //   { command: 'inventory', description: '–ü–æ–∫–∞–∑–∞—Ç—å –æ—Å—Ç–∞—Ç–∫–∏' },
  // ]);

  // –ø–æ–¥–∫–ª—é—á–∞–µ–º middleware
  //   this.bot.use(async (ctx, next) => {
  //     // –ø–∞—Ç—á–∏–º reply —á–µ—Ä–µ–∑ any, —á—Ç–æ–±—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É —Ç–∏–ø—É
  //     const originalReply = (ctx as any).reply.bind(ctx);
  //     (ctx as any).reply = async (text: string, extra?: any) => {
  //       console.log('üì§ reply ‚Üí', text, extra);
  //       return originalReply(text, extra);
  //     };

  //     // user upsert
  //     if (ctx.from?.id) {
  //       const tgId = String(ctx.from.id);
  //       const user = await this.prisma.user.upsert({
  //         where: { telegramId: tgId },
  //         update: {},
  //         create: { telegramId: tgId },
  //       });
  //       ctx.state.user = user;
  //     }

  //     return next();
  //   });
  // }
}

// @Update()
// export class BotUpdate {
//   constructor(
//     private readonly prisma: PrismaService,
//     private readonly bot: Telegraf<TelegrafContext>,
//   ) {}

//   @Action(/approve_access:(.+)/)
//   async onApproveAccess(@Ctx() ctx: TelegrafContext) {
//     const telegramId = (ctx as any).match[1];
//     await this.prisma.user.update({ where: { telegramId }, data: { role: 'OPERATOR' } });
//     await ctx.reply('‚úÖ –î–æ—Å—Ç—É–ø –æ–¥–æ–±—Ä–µ–Ω.');
//     // –ú–æ–∂–Ω–æ —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
//   }

//   @Action(/decline_access:(.+)/)
//   async onDeclineAccess(@Ctx() ctx: TelegrafContext) {
//     const telegramId = (ctx as any).match[1];
//     console.log(`–î–æ—Å—Ç—É–ø –æ—Ç–∫–ª–æ–Ω—ë–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${telegramId}`);
//     await ctx.reply('‚ùå –î–æ—Å—Ç—É–ø –æ—Ç–∫–ª–æ–Ω—ë–Ω.');
//     // –ú–æ–∂–Ω–æ —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
//   }
// }
