import { Injectable } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { InjectBot } from 'nestjs-telegraf';
import { Telegraf, Context as TelegrafContext } from 'telegraf';

@Injectable()
export class NotificationService {
  constructor(
    @InjectBot() private readonly bot: Telegraf<TelegrafContext>,
    private readonly config: ConfigService,
  ) {}

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
   */
  async sendMessage(telegramId: string, message: string, extra?: any) {
    try {
      return await this.bot.telegram.sendMessage(telegramId, message, extra);
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${telegramId}:`, error);
      throw error;
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏
   */
  async notifyAccessRequestDeclined(telegramId: string, adminNote?: string) {
    const message = `‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –¥–æ—Å—Ç—É–ø –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞${adminNote ? `\n\n–ü—Ä–∏—á–∏–Ω–∞: ${adminNote}` : ''}`;
    return this.sendMessage(telegramId, message);
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏ —Å –∫–Ω–æ–ø–∫–æ–π webapp
   */
  async notifyAccessRequestApproved(telegramId: string, adminNote?: string) {
    const webappUrl = this.config.get<string>('WEBAPP_URL') || 'https://big-grain-tg.vercel.app';
    const message = `‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –¥–æ—Å—Ç—É–ø –±—ã–ª–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!${adminNote ? `\n\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${adminNote}` : ''}`;

    return this.sendMessage(telegramId, message, {
      reply_markup: {
        inline_keyboard: [[{ text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', web_app: { url: webappUrl } }]],
      },
    });
  }

  /**
   * –£–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ –Ω–∞ –¥–æ—Å—Ç—É–ø
   */
  async notifyAdminAccessRequest(user: any) {
    const adminId = '239676985';
    const message = `üö™ –ó–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç—É–ø\n–ò–º—è: ${user.firstName || ''} ${user.lastName || ''}\nUsername: @${user.username || ''}\nTelegram ID: ${user.telegramId}`;
    try {
      await this.bot.telegram.sendMessage(adminId, message, {
        reply_markup: {
          inline_keyboard: [
            [
              { text: '–û–¥–æ–±—Ä–∏—Ç—å', callback_data: `approve_access:${user.telegramId}` },
              { text: '–û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data: `decline_access:${user.telegramId}` },
            ],
          ],
        },
      });
    } catch (e) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É:', e);
    }
  }
}
