import { Update, Start, Ctx, Hears, Command } from 'nestjs-telegraf';
import { ProductsService } from 'src/products/products.service';
import { Context } from 'telegraf';

@Update()
export class BotUpdate {
  constructor(private readonly productsService: ProductsService) {}

  @Start()
  async onStart(@Ctx() ctx: Context) {
    const name = ctx.from?.first_name || '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
    await ctx.reply(
      `–ü—Ä–∏–≤–µ—Ç, ${name}! üëã\n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–ª–∞–¥–æ–º.\n\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.`,
      {
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: '–û—Å—Ç–∞—Ç–∫–∏',
                web_app: { url: process.env.WEBAPP_URL + '/inventory' },
              },
            ],
          ],
        },
      },
    );
  }

  @Command('inventory')
  async onInventoryCommand(@Ctx() ctx: Context) {
    // –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –∫–Ω–æ–ø–∫–µ ‚Äî –º–æ–∂–Ω–æ —Ä–µ–¥–∏—Ä–µ–∫—Ç –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–æ–π
    await ctx.reply('–û—Ç–∫—Ä—ã–≤–∞—é –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ‚Ä¶', {
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: '–û—Ç–∫—Ä—ã—Ç—å –û—Å—Ç–∞—Ç–∫–∏',
              web_app: { url: process.env.WEBAPP_URL + '/inventory' },
            },
          ],
        ],
      },
    });
  }

  @Command('products') // <-- –Ω–æ–≤—ã–π —Ö—ç–Ω–¥–ª–µ—Ä
  async onProducts(@Ctx() ctx: Context) {
    const items = await this.productsService.findAll();
    if (items.length === 0) {
      return ctx.reply('–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø—É—Å—Ç üò¢');
    }
    // –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
    const lines = items.map((p) => {
      const status = p.quantity >= p.minThreshold ? 'üü¢' : 'üî¥';
      const unit = p.unit ? ` ${p.unit}` : '';
      return `${status} ${p.name} ‚Äî ${p.quantity}${unit} (–º–∏–Ω. ${p.minThreshold})`;
    });
    await ctx.reply(`üì¶ *–¢–æ–≤–∞—Ä—ã:*\n\n` + lines.join('\n'), { parse_mode: 'Markdown' });
  }

  // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å üëá –¥–ª—è —Ç–µ—Å—Ç–∞
  @Hears(/.*/)
  async fallback(@Ctx() ctx: Context) {
    await ctx.reply('–ù–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É. –ù–∞–∂–º–∏ /start –∏–ª–∏ –∫–Ω–æ–ø–∫—É ¬´–û—Å—Ç–∞—Ç–∫–∏¬ª.');
  }
}
