// src/bot/bot.update.ts
import { Update, Start, Command, Action, Ctx, Hears } from 'nestjs-telegraf';
import { Context } from 'telegraf';
import { ProductsService } from '../products/products.service';
import { PrismaService } from 'nestjs-prisma';

@Update()
export class BotUpdate {
  constructor(
    private readonly productsService: ProductsService,
    private readonly prisma: PrismaService,
  ) {}

  private keyboard = [
    [
      { text: 'üì¶ –û—Å—Ç–∞—Ç–∫–∏', callback_data: 'inventory' },
      { text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å', callback_data: 'add' },
    ],
  ];

  private async showMenu(ctx: Context) {
    await ctx.reply('üîπ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', {
      reply_markup: { inline_keyboard: this.keyboard },
    });
  }

  @Start()
  async onStart(@Ctx() ctx: Context) {
    await this.ensureUser(ctx);
    await this.showMenu(ctx);
  }

  @Command('menu')
  async onMenu(@Ctx() ctx: Context) {
    await this.showMenu(ctx);
  }

  @Action('inventory')
  async onInventory(@Ctx() ctx: Context) {
    await this.ensureUser(ctx);

    // 1) —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é
    const msg = ctx.callbackQuery?.message;
    if (msg?.message_id) {
      await ctx.deleteMessage(msg.message_id);
    }

    // 2) –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
    const items = await this.productsService.findAll();
    if (items.length === 0) {
      await ctx.reply('–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø—É—Å—Ç üò¢');
    } else {
      const lines = items.map((p) => {
        const mark = p.quantity >= p.minThreshold ? 'üü¢' : 'üî¥';
        return `${mark} ${p.name} ‚Äî ${p.quantity} (–º–∏–Ω. ${p.minThreshold})`;
      });
      await ctx.reply(`üì¶ *–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–∏:*\n\n${lines.join('\n')}`, {
        parse_mode: 'Markdown',
      });
    }

    // 3) —Å–Ω–æ–≤–∞ –º–µ–Ω—é
    await this.showMenu(ctx);
  }

  @Action('add')
  async onAskAdd(@Ctx() ctx: Context) {
    await this.ensureUser(ctx);

    // —É–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–µ–Ω—é
    const msg = ctx.callbackQuery?.message;
    if (msg?.message_id) {
      await ctx.deleteMessage(msg.message_id);
    }

    // –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
    await ctx.reply(
      'üìù –í–≤–µ–¥–∏—Ç–µ —Ç–æ–≤–∞—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n' +
        '`–ù–∞–∑–≤–∞–Ω–∏–µ;–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ;–ú–∏–Ω.–ø–æ—Ä–æ–≥`\n\n' +
        '–ü—Ä–∏–º–µ—Ä: `–ú–∞—Å–∫–∏;100;50`',
      { parse_mode: 'Markdown' },
    );
  }

  @Hears(/^(.+);\s*(\d+)\s*;\s*(\d+)$/)
  async onAddProduct(@Ctx() ctx: Context) {
    await this.ensureUser(ctx);

    // —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤–≤–æ–¥–æ–º
    const userMsg = ctx.message;
    if (userMsg?.message_id) {
      await ctx.deleteMessage(userMsg.message_id);
    }

    // –ø–∞—Ä—Å–∏–º –∏ —Å–æ–∑–¥–∞—ë–º
    const match = (ctx as any).match as RegExpMatchArray;
    const [, rawName, rawQty, rawMin] = match;
    const name = rawName.trim();
    const quantity = parseInt(rawQty, 10);
    const minThreshold = parseInt(rawMin, 10);

    try {
      const product = await this.productsService.create({ name, quantity, minThreshold });
      await ctx.reply(
        `‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω:\n` +
          `‚Ä¢ ${product.name}\n` +
          `‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${product.quantity}\n` +
          `‚Ä¢ –ú–∏–Ω. –ø–æ—Ä–æ–≥: ${product.minThreshold}`,
      );
    } catch (err) {
      await ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${err.message}`);
    }

    // –≤ –∫–æ–Ω—Ü–µ —Å–Ω–æ–≤–∞ –º–µ–Ω—é
    await this.showMenu(ctx);
  }

  @Action(/approve_access:(.+)/)
  async onApproveAccess(@Ctx() ctx: Context) {
    const data = (ctx.callbackQuery as any)?.data as string | undefined;
    const telegramId = data?.split(':')[1];
    if (!telegramId) {
      await ctx.reply('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
      return;
    }
    await this.prisma.user.update({ where: { telegramId }, data: { role: 'OPERATOR' } });
    await ctx.reply('‚úÖ –î–æ—Å—Ç—É–ø –æ–¥–æ–±—Ä–µ–Ω.');
    // –ú–æ–∂–Ω–æ —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
  }

  @Action(/decline_access:(.+)/)
  async onDeclineAccess(@Ctx() ctx: Context) {
    const data = (ctx.callbackQuery as any)?.data as string | undefined;
    const telegramId = data?.split(':')[1];
    if (!telegramId) {
      await ctx.reply('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
      return;
    }
    await ctx.reply('‚ùå –î–æ—Å—Ç—É–ø –æ—Ç–∫–ª–æ–Ω—ë–Ω.');
    // –ú–æ–∂–Ω–æ —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
  }

  private async ensureUser(ctx: Context) {
    if (ctx.from?.id) {
      const tgId = String(ctx.from.id);
      const user = await this.prisma.user.upsert({
        where: { telegramId: tgId },
        update: {},
        create: { telegramId: tgId },
      });
      ctx.state.user = user;
    }
  }
}
