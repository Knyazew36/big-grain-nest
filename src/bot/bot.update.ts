// src/bot/bot.update.ts
import { Update, Start, Command, Action, Ctx, Hears } from 'nestjs-telegraf';
import { Context } from 'telegraf';
import { ProductsService } from '../products/products.service';
import { PrismaService } from 'nestjs-prisma';
import { NotificationService } from './notification.service';
import { BotService } from './bot.service';

@Update()
export class BotUpdate {
  constructor(
    private readonly productsService: ProductsService,
    private readonly prisma: PrismaService,
    private readonly notificationService: NotificationService,
  ) {}

  @Start()
  async onStart(@Ctx() ctx: Context) {
    await ctx.reply('üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–∞–º–∏ —Ç–æ–≤–∞—Ä–æ–≤.');
    return;
  }

  @Action(/approve_access:(.+):(.+)/)
  async onApproveAccess(@Ctx() ctx: Context) {
    const data = (ctx.callbackQuery as any)?.data as string | undefined;
    const parts = data?.split(':');
    const telegramId = parts?.[1];
    const requestId = parseInt(parts?.[2] || '0', 10);

    if (!telegramId || !requestId) {
      await ctx.reply('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –∑–∞—è–≤–∫—É.');
      return;
    }

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ (—Ç–æ–ª—å–∫–æ OWNER, ADMIN, IT –º–æ–≥—É—Ç –æ–¥–æ–±—Ä—è—Ç—å)
      await this.ensureUser(ctx);
      const currentUser = ctx.state.user;
      if (!currentUser || !['OWNER', 'ADMIN', 'IT'].includes(currentUser.role)) {
        await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è –∑–∞—è–≤–æ–∫.');
        return;
      }

      // –ù–∞—Ö–æ–¥–∏–º –∑–∞—è–≤–∫—É –ø–æ ID
      const request = await this.prisma.accessRequest.findUnique({
        where: { id: requestId },
        include: { user: true },
      });

      if (!request) {
        await ctx.reply('‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
        return;
      }

      if (request.status !== 'PENDING') {
        await ctx.reply('‚ùå –ó–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.');
        return;
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ OPERATOR
      await this.prisma.user.update({
        where: { id: request.userId },
        data: { role: 'OPERATOR' },
      });

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
      await this.prisma.accessRequest.update({
        where: { id: requestId },
        data: {
          status: 'APPROVED',
          processedAt: new Date(),
          processedById: currentUser.id,
        },
      });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      await this.notificationService.notifyAccessRequestApproved(request.user.telegramId);
      await ctx.reply('‚úÖ –î–æ—Å—Ç—É–ø –æ–¥–æ–±—Ä–µ–Ω. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω.');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏.');
    }
  }

  @Action(/decline_access:(.+):(.+)/)
  async onDeclineAccess(@Ctx() ctx: Context) {
    const data = (ctx.callbackQuery as any)?.data as string | undefined;
    const parts = data?.split(':');
    const telegramId = parts?.[1];
    const requestId = parseInt(parts?.[2] || '0', 10);

    if (!telegramId || !requestId) {
      await ctx.reply('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –∑–∞—è–≤–∫—É.');
      return;
    }

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ (—Ç–æ–ª—å–∫–æ OWNER, ADMIN, IT –º–æ–≥—É—Ç –æ—Ç–∫–ª–æ–Ω—è—Ç—å)
      await this.ensureUser(ctx);
      const currentUser = ctx.state.user;
      if (!currentUser || !['OWNER', 'ADMIN', 'IT'].includes(currentUser.role)) {
        await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–æ–∫.');
        return;
      }

      // –ù–∞—Ö–æ–¥–∏–º –∑–∞—è–≤–∫—É –ø–æ ID
      const request = await this.prisma.accessRequest.findUnique({
        where: { id: requestId },
        include: { user: true },
      });

      if (!request) {
        await ctx.reply('‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
        return;
      }

      if (request.status !== 'PENDING') {
        await ctx.reply('‚ùå –ó–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.');
        return;
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
      await this.prisma.accessRequest.update({
        where: { id: requestId },
        data: {
          status: 'DECLINED',
          processedAt: new Date(),
          processedById: currentUser.id,
        },
      });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      await this.notificationService.notifyAccessRequestDeclined(request.user.telegramId);
      await ctx.reply('‚ùå –î–æ—Å—Ç—É–ø –æ—Ç–∫–ª–æ–Ω—ë–Ω. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω.');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏.');
    }
  }

  private async ensureUser(ctx: Context) {
    if (ctx.from?.id) {
      const tgId = String(ctx.from.id);
      const user = await this.prisma.user.upsert({
        where: { telegramId: tgId },
        update: {},
        create: { telegramId: tgId },
      });
      ctx.state.user = user;
    }
  }
}
